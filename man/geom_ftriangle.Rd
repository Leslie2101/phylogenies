% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ftriangle.R
\name{geom_ftriangle}
\alias{geom_ftriangle}
\title{Geom Full Triangle Point}
\usage{
geom_ftriangle(
  mapping = NULL,
  data = NULL,
  stat = "identity",
  position = "identity",
  na.rm = FALSE,
  show.legend = NA,
  inherit.aes = TRUE,
  ...
)
}
\arguments{
\item{mapping}{Set of aesthetic mappings created by aes() or aes_(). If specified
and inherit.aes = TRUE (the default), it is combined with the default mapping at
the top level of the plot. You must supply mapping if there is no plot mapping.}

\item{data}{The data to be displayed in this layer. There are three options:
If NULL, the default, the data is inherited from the plot data as specified in the call to ggplot().
A data.frame, or other object, will override the plot data. All objects will be fortified to produce a data frame.}

\item{stat}{The statistical transformation to use on the data for this layer, as a string.}

\item{position}{Position adjustment, either as a string, or the result of a call to a position adjustment function.}

\item{na.rm}{If FALSE, the default, missing values are removed with a warning. If TRUE, missing values are silently removed.}

\item{show.legend}{logical. Should this layer be included in the legends? NA, the default, includes if any aesthetics are mapped.}

\item{inherit.aes}{If FALSE, overrides the default aesthetics, rather than combining with them. This is most useful for helper functions that define both data and aesthetics and shouldn't inherit behaviour from the default plot specification, e.g. borders.}

\item{...}{Other arguments passed on to layer(). These are often aesthetics, used to set an aesthetic to a fixed value,
like colour = "red" or size = 3.5.}
}
\value{
A ggplot2 layer that can be added to a ggplot object.
}
\description{
This function creates a custom ggplot2 geom to draw \strong{full} upside-down triangle points
with customizable width and height. Coordinates aligns with the \strong{upside-down head} of
triangles, instead of the center of the shape like geom_point.
}
\examples{
df <- data.frame(x = 1:5, y = 1:5,
                 width = c(0.2, 0.4, 0.6, 0.4, 0.6),
                 height = c(0.2, 0.5, 0.6, 0.5, 0.2))
p <- ggplot(df) +
     geom_ftriangle(aes(x = x, y = y,
                        fill = x,
                        width = width,
                        height = height),
                    colour = "black")
print(p)
}
